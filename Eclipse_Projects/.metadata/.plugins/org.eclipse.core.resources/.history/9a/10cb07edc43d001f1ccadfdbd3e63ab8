// Sadam Hashi, smhashi, CIS 340, MP2

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class MP2 {
    
    private Scanner scnr;
    private ArrayList<Device> devices;
    
    public MP2() {
        devices = new ArrayList<>();
        scnr = new Scanner(System.in);
//        SampleData();
    }
    
    public static void main(String[] args) {
        MP2 app = new MP2();
        app.SampleData();
        app.displayMenu();
    }

    private void SampleData() 
    {
    	
        devices.add(new Device("6757A", "Apple 9.7-inch iPad Pro", true));
        devices.add(new Device("93P51B", "Amazon Kindle Fire Kids Edition", true));
        devices.add(new Device("10N8C", "LeapFrog Epic Learning Tablet", true));
        devices.add(new Device("85U2O", "Amazon Kindle Fire HD 8", true));
        devices.add(new Device("91H2D", "HP Envy 8 Note", true));
        
      

    }

    private void displayMenu() {
        int choice = 0;
        int choice2 = 0;
        do {
            System.out.println("\nLibrary Device Checkout System");
            System.out.println("1. List devices by Title");
            System.out.println("2. Add new devices");
            System.out.println("3. Edit devices information");
            System.out.println("4. Search by device name");
            System.out.println("5. Check out devices");
            System.out.println("6. Check in devices");
            System.out.println("7. Exit");
            System.out.print("Select menu option (1-7): ");

            try {
        		choice = Integer.parseInt(scnr.nextLine());
            } catch (InputMismatchException err) {
                System.out.println("Invalid input. Number must be an integer between 1 and 7.");
                scnr.nextLine(); 
                continue;
            }
            
            switch (choice) {
                case 1:
                    listDevices();
                    break;
                case 2:
                    addDevice();
                    break;
                case 3:
                    editDevice();
                    break;
                case 4:
                    searchDevice();
                    break;
                case 5:
                    checkOutDevice();
                    break;
                case 6:
                    checkInDevice();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    break;
                default:
                	
            }
        } while (choice != 7);
    }

    private void listDevices() {
        System.out.println("\nList of Devices:");
        for (Device device : devices) {
            if (device != null) {
                System.out.println(device);
            }
        }
        space();
    }

    private void addDevice() {
   
        System.out.print("Enter SKU: ");
        String sku = scnr.nextLine();
        System.out.print("Enter Name: ");
        String name = scnr.nextLine();
        System.out.print("Is the device available (true/false): ");
        boolean available = scnr.nextBoolean();
        scnr.nextLine(); // Consume newline

        devices.add(new Device(sku, name, available));
        if (devices.size() > 10) {
        	System.out.println("\nUnable to Add more Devices\n");
        	space();
            return;
        }
        System.out.println("Device added successfully.");
        space();
    }

    private void editDevice() {
        System.out.print("Enter SKU of device to edit: ");
        String sku = scnr.nextLine();

        Device device = findDeviceBySku(sku);
        if (device != null) {
            System.out.print("Enter new Name: ");
            String name = scnr.nextLine();
            System.out.print("Is the device available (true/false): ");
            boolean available = scnr.nextBoolean();
            scnr.nextLine(); // Consume newline

            device.setName(name);
            device.setAvailable(available);
            System.out.println("Device updated successfully.");
        } else {
            System.out.println("Device not found.");
        }
        space();
    }

    private void searchDevice() {
        System.out.print("Enter device name to search: ");
        String name = scnr.nextLine();

        System.out.println("\nSearch Results:");
        for (Device device : devices) {
            if (device != null && device.getName().equalsIgnoreCase(name)) {
                System.out.println(device);
            }
        }
        space();
    }

    private void checkOutDevice() {
        System.out.println("Available devices:");
        for (Device device : devices) {
            if (device != null && device.isAvailable()) {
                System.out.println(device);
            }
        }
        System.out.print("Enter SKU of device to check out: ");
        String sku = scnr.nextLine();

        Device device = findDeviceBySku(sku);
        if (device != null && device.isAvailable()) {
            device.setAvailable(false);
            System.out.println("Device checked out successfully.");
        } else {
            System.out.println("Device not found or already checked out.");
        }
        space();
    }

    private void checkInDevice() {
        System.out.print("Enter SKU of device to check in: ");
        String sku = scnr.nextLine();

        Device device = findDeviceBySku(sku);
        if (device != null && !device.isAvailable()) {
            device.setAvailable(true);
            System.out.println("Device checked in successfully.");
        } else {
            System.out.println("Device not found or already checked in.");
        }
        space();
    }

    private Device findDeviceBySku(String sku) {
        for (Device device : devices) {
            if (device != null && device.getSku().equalsIgnoreCase(sku)) {
                return device;
            }
        }
        return null;
    }

    private void space() {
        System.out.print("Press Enter to continue...");
        scnr.nextLine();
    }
}
